#!/usr/bin/env python3
import sys
import re


def remove_comments_split_lines(s):
    no_comments = re.sub("[\t ]*#.*", '', s)
    return [line for line in no_comments.splitlines() if line]


def is_hex_byte_str(s):
    digits = '0123456789ABCDEFabcdef'
    return len(s) == 2 and s[0] in digits and s[1] in digits


def hex_byte2int(hbyte):
    digits = '0123456789ABCDEF'
    if type(hbyte) is not str:
        raise TypeError('Parameter must be a string')
    hbyte = hbyte.upper()
    if not(is_hex_byte_str(hbyte)):
        raise ValueError('Parameter must be string containing 2 hex digits')
    return digits.index(hbyte[1]) + digits.index(hbyte[0]) * 16


def split_and_validate_source(prog_src):
    if '===' not in prog_src:
        split = prog_src, []
    else:
        loc = prog_src.index('===')
        split = prog_src[:loc], prog_src[loc+1:] 

    for num, line in enumerate(split[0]):
        if not(is_hex_byte_str(line)):
            raise ValueError(
                f'Invalid program source on line {num + 1}'
            )

    for num, line in enumerate(split[1]):
        parts = line.split(':')
        if not(is_hex_byte_str(parts[0])) or not(is_hex_byte_str(parts[1])):
            raise ValueError(
                f'Invalid program source on line {len(split[0]) + num + 2}'
            ) 

    return split


def make_file_bytearray(prog_and_data):
    program = prog_and_data[0]
    data = prog_and_data[1]
    byte_ints = [] 
    num_bytes = len(program)

    for hex_byte in program:
        byte_ints.append(hex_byte2int(hex_byte))
    for i in range(8192 - num_bytes):
        byte_ints.append(0)
    for var in data:
        location, value = var.split(':') 
        byte_ints[hex_byte2int(location)] = hex_byte2int(value)

    return bytes(byte_ints)


def source_to_binary(lines, name):
    outfile = open(f'{name}.bin', 'wb')
    outfile.write(
        make_file_bytearray(split_and_validate_source(lines))
    )
    outfile.close()


if __name__ == "__main__":
    try:
        sourcefile = sys.argv[1]
        if '.' not in sourcefile:
            raise ValueError(
                "Usage error: Source file must have .spc extension"
            )
        name, extension = tuple(sourcefile.split('.'))
        infile = open(sourcefile, 'r')
        lines = remove_comments_split_lines(infile.read())
        infile.close()
        source_to_binary(lines, name)
    except IndexError:
        print('Usage error: Include source file')
        sys.exit()
    except FileNotFoundError:
        print('Usage error: Source file not found')
        sys.exit()
    except ValueError as e:
        print(e)
        sys.exit()
